<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue2知识总结（一）</title>
      <link href="2021/06/19/Vue2%E7%AC%94%E8%AE%B0/"/>
      <url>2021/06/19/Vue2%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue2知识大全"><a href="#Vue2知识大全" class="headerlink" title="Vue2知识大全"></a>Vue2知识大全</h1><p>[TOC]</p><h2 id="理解-Vue中的MVVM"><a href="#理解-Vue中的MVVM" class="headerlink" title="(理解)Vue中的MVVM"></a>(理解)Vue中的MVVM</h2><h3 id="Vue中的MVVM"><a href="#Vue中的MVVM" class="headerlink" title="Vue中的MVVM"></a>Vue中的MVVM</h3><ul><li>什么是MVVM呢？<ul><li>通常我们学习一个概念，最好的方式是去看维基百科(对，千万别看成了百度百科)</li><li><a href="https://zh.wikipedia.org/wiki/MVVM">https://zh.wikipedia.org/wiki/MVVM</a></li><li>维基百科的官方解释，我们这里不再赘述。</li></ul></li><li>我们直接来看Vue的MVVM（Model-View-ViewModel）</li></ul><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/20210711133503675.png" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/20190218151600647.jpeg" alt="img"></p><ul><li><strong>View层</strong>：<ul><li>视图层</li><li>在我们前端开发中，通常就是DOM层。</li><li>主要的作用是给用户展示各种信息。</li></ul></li><li><strong>Model层</strong>：<ul><li>数据层</li><li>数据可能是我们固定的死数据，更多的是来自我们服务器，从网络上请求下来的数据。</li><li>在我们计数器的案例中，就是后面抽取出来的obj，当然，里面的数据可能没有这么简单。</li></ul></li><li><strong>VueModel层:</strong><ul><li>视图模型层</li><li>视图模型层是View和Model沟通的桥梁。</li><li>一方面它实现了Data Binding，也就是数据绑定，将Model的改变实时的反应到View中</li><li>另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些事件(点击、滚动、touch等)时，可以监听到，并在需要的情况下改变对应的Data。</li></ul></li></ul><p>MVVM的实现原理：MVVM的实现主要是三个核心点：</p><ul><li>响应式：vue如何监听data的属性变化</li><li>模板解析：vue的模板是如何被解析的、</li><li>渲染：vue模板是如何被渲染成HTML的</li></ul><h2 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h2><p>图一</p><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/20210711142920351.png" alt="img"></p><p>图二</p><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/2021071114294270.png" alt="img"></p><p>调用beforMount， 也就是说实际从creted到beforeMount之间，最主要的工作就是将模板或者el转换为render函数。不管是用el，还是用template, 或者是用我们最常用的.vue文件(如果是.vue文件，他其实是会先编译成为template)，最终他都是会被转换为render函数的。</p><p>beforeMount调用后，我们是不是要开始渲染render函数了，首先我们会先生产一个虚拟dom（用于后续数据发生变化时，新老虚拟dom对比计算），进行保存，然后再开始将render渲染成为真实的dom。</p><p>只有当我们状态数据发生变化时,我们在触发beforeUpdate，要开始将我们变化后的数据渲染到页面上了（实际上这里是有个判断的，判断当前的_isMounted是不是为ture并且isDestroyed是不是为false，也就是说，保证dom已经被挂载的情况下，且当前组件并未被销毁，才会走update流程）</p><p>然后再执行updated，所以updated里面也可以操作dom，并拿到最新更新后的dom。不过这里我要插一句话了，mouted和updated的执行，并不会等待所有子组件都被挂载完成后再执行，所以如果你希望所有视图都更新完毕后再做些什么事情，那么你最好在mouted或者updated中加一个$nextTick（），然后把要做的事情放在$netTick()中去做（至于为什么，以后讲到$nextTick再说吧    </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;button @click=&quot;changeMsg&quot;&gt;改变&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeMsg () &#123;</span><br><span class="line">                <span class="keyword">this</span>.message = <span class="string">&#x27;goodbye world&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate() &#123;</span><br><span class="line">            console.log(<span class="string">&#x27;------初始化前------&#x27;</span>)</span><br><span class="line">            console.log(<span class="keyword">this</span>.message)</span><br><span class="line">            console.log(<span class="keyword">this</span>.$el)</span><br><span class="line">        &#125;,</span><br><span class="line">        created () &#123;</span><br><span class="line">            console.log(<span class="string">&#x27;------初始化完成------&#x27;</span>)</span><br><span class="line">            console.log(<span class="keyword">this</span>.message)</span><br><span class="line">            console.log(<span class="keyword">this</span>.$el)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount () &#123;</span><br><span class="line">            console.log(<span class="string">&#x27;------挂载前---------&#x27;</span>)</span><br><span class="line">            console.log(<span class="keyword">this</span>.message)</span><br><span class="line">            console.log(<span class="keyword">this</span>.$el)</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted () &#123;</span><br><span class="line">            console.log(<span class="string">&#x27;------挂载完成---------&#x27;</span>)</span><br><span class="line">            console.log(<span class="keyword">this</span>.message)</span><br><span class="line">            console.log(<span class="keyword">this</span>.$el)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate () &#123;</span><br><span class="line">            console.log(<span class="string">&#x27;------更新前---------&#x27;</span>)</span><br><span class="line">            console.log(<span class="keyword">this</span>.message)</span><br><span class="line">            console.log(<span class="keyword">this</span>.$el)</span><br><span class="line">        &#125;,</span><br><span class="line">        updated() &#123;</span><br><span class="line">            console.log(<span class="string">&#x27;------更新后---------&#x27;</span>)</span><br><span class="line">            console.log(<span class="keyword">this</span>.message)</span><br><span class="line">            console.log(<span class="keyword">this</span>.$el)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20220511210858387.png" alt="image-20220511210858387"></p><ul><li><p>beforeMount中，我们可以看出，我们拿到了$el，而mounted中，我们也拿到了$el， 不过好像有点不一样是吧。一个好像是渲染前的，一个是渲染后的。</p></li><li><p>会把我们的这个el（#app）编译成template模板啊，再转换为render函数，最后将render函数渲染成为真实dom，渲染成真实dom后，我们是不是会用这个渲染出来的dom去替换原来的vm.$el啊。这也就是我们前面所说到的替换$el是什么意思了。</p></li><li><p>所以， 在mounted中，我们所得到的渲染完成后的$el。</p></li></ul><p>加入了template变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">&#x27;&lt;div&gt;我是模板内的&#123;&#123;message&#125;&#125;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeMsg () &#123;</span><br><span class="line">                <span class="keyword">this</span>.message = <span class="string">&#x27;goodbye world&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate() &#123;</span><br><span class="line">            console.log(<span class="string">&#x27;------初始化前------&#x27;</span>)</span><br><span class="line">            console.log(<span class="keyword">this</span>.message)</span><br><span class="line">            console.log(<span class="keyword">this</span>.$el)</span><br><span class="line">        &#125;,</span><br><span class="line">        created () &#123;</span><br><span class="line">            console.log(<span class="string">&#x27;------初始化完成------&#x27;</span>)</span><br><span class="line">            console.log(<span class="keyword">this</span>.message)</span><br><span class="line">            console.log(<span class="keyword">this</span>.$el)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount () &#123;</span><br><span class="line">            console.log(<span class="string">&#x27;------挂载前---------&#x27;</span>)</span><br><span class="line">            console.log(<span class="keyword">this</span>.message)</span><br><span class="line">            console.log(<span class="keyword">this</span>.$el)</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted () &#123;</span><br><span class="line">            console.log(<span class="string">&#x27;------挂载完成---------&#x27;</span>)</span><br><span class="line">            console.log(<span class="keyword">this</span>.message)</span><br><span class="line">            console.log(<span class="keyword">this</span>.$el)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate () &#123;</span><br><span class="line">            console.log(<span class="string">&#x27;------更新前---------&#x27;</span>)</span><br><span class="line">            console.log(<span class="keyword">this</span>.message)</span><br><span class="line">            console.log(<span class="keyword">this</span>.$el)</span><br><span class="line">        &#125;,</span><br><span class="line">        updated() &#123;</span><br><span class="line">            console.log(<span class="string">&#x27;------更新后---------&#x27;</span>)</span><br><span class="line">            console.log(<span class="keyword">this</span>.message)</span><br><span class="line">            console.log(<span class="keyword">this</span>.$el)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20220511210842424.png" alt="image-20220511210842424"  /><p>在beforeMount的时候，$el还是#app， 但是在mounted的时候就变成模板的div了，是不是因为我们传了个template啊，所以，他直接将这个template转换成render函数啦。再渲染成真实dom后，用渲染出来的真<strong>实dom替换了原来的$el</strong>。</p><p>删除了el属性</p><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20220511211432792.png" alt="image-20220511211432792"></p><p>是不是只走了前面两个生命周期啊，后面就没走了，这个时候其实就是在等$mount被调用了，那我们加个按钮，点击按钮，手动调用一下$mount看会怎样</p><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20220511211529670.png" alt="image-20220511211529670"></p><p>因此有些vue项目是手动触发mount</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">export <span class="keyword">default</span> new <span class="title">Vue</span><span class="params">(&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  el: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  router,</span></span></span><br><span class="line"><span class="function"><span class="params">  store,</span></span></span><br><span class="line"><span class="function"><span class="params">  i18n,</span></span></span><br><span class="line"><span class="function"><span class="params">  render: h =&gt; h(App)</span></span></span><br><span class="line"><span class="function">&#125;)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">export <span class="keyword">default</span> new <span class="title">Vue</span><span class="params">(&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  router,</span></span></span><br><span class="line"><span class="function"><span class="params">  store,</span></span></span><br><span class="line"><span class="function"><span class="params">  i18n,</span></span></span><br><span class="line"><span class="function"><span class="params">  render: h =&gt; h(App)</span></span></span><br><span class="line"><span class="function">&#125;).$<span class="title">mount</span><span class="params">(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">就很出现两种写法</span></span><br></pre></td></tr></table></figure><h2 id="特殊语法"><a href="#特殊语法" class="headerlink" title="特殊语法"></a>特殊语法</h2><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><ul><li>v-pre用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustache语法。</li><li>比如下面的代码：<ul><li>第一个h2元素中的内容会被编译解析出来对应的内容</li><li>第二个h2元素中会直接显示</li></ul></li><li><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20220511212739069.png" alt="image-20220511212739069"></li></ul><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><ul><li>在某些情况下，我们浏览器可能会直接显然出未编译的Mustache标签。</li><li>应对延迟dom形成</li><li>cloak: 斗篷</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    [v-cloak] &#123;</span><br><span class="line">      display: none;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span> v-cloak&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"><span class="comment">/*v-cloak 指令用法</span></span><br><span class="line"><span class="comment">（1）插值表达式存在的问题：“闪动”</span></span><br><span class="line"><span class="comment">（2）如何解决该问题：使用v-cloak指令</span></span><br><span class="line"><span class="comment">（3）解决该问题的原理：先隐藏，替换好值之后再显示最终的值*/</span></span><br><span class="line"> &lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 在vue解析之前, div中有一个属性v-cloak</span></span><br><span class="line">    <span class="comment">// 在vue解析之后, div中没有一个属性v-cloak</span></span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">      <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">          message: <span class="string">&#x27;你好啊&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-bind语法糖"><a href="#v-bind语法糖" class="headerlink" title="v-bind语法糖"></a><strong>v-bind语法糖</strong></h3><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20220511213111891.png" alt="image-20220511213111891"></p><p>绑定class</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">用法二：也可以通过判断，传入多个值</span><br><span class="line">&lt;h2 :class=&quot;&#123;&#x27;active&#x27;: isActive, &#x27;line&#x27;: isLine&#125;&quot;&gt;Hello World&lt;/h2&gt;</span><br><span class="line">    </span><br><span class="line">用法三：和普通的类同时存在，并不冲突</span><br><span class="line">注：如果isActive和isLine都为<span class="keyword">true</span>，那么会有title/active/line三个类</span><br><span class="line">&lt;h2 class=&quot;title&quot; :class=&quot;&#123;&#x27;active&#x27;: isActive, &#x27;line&#x27;: isLine&#125;&quot;&gt;Hello World&lt;/h2&gt;</span><br><span class="line">    </span><br><span class="line">用法四：如果过于复杂，可以放在一个methods或者computed中</span><br><span class="line">注：classes是一个计算属性</span><br><span class="line">&lt;h2 class=&quot;title&quot; :class=&quot;classes&quot;&gt;Hello World&lt;/h2&gt;</span><br></pre></td></tr></table></figure><h3 id="v-bind和v-for结合"><a href="#v-bind和v-for结合" class="headerlink" title="v-bind和v-for结合"></a>v-bind和v-for结合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;(m, index) in movies&quot;</span> </span><br><span class="line">      :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&#123;active:index==currentIndex&#125;&quot;</span> </span><br><span class="line">      <span class="meta">@click</span>=<span class="string">&quot;itemClick(index)&quot;</span>&gt;</span><br><span class="line">        &#123;&#123;index&#125;&#125;-&#123;&#123;m&#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        movies: [<span class="string">&#x27;海王&#x27;</span>, <span class="string">&#x27;海尔兄弟&#x27;</span>, <span class="string">&#x27;火影忍者&#x27;</span>, <span class="string">&#x27;进击的巨人&#x27;</span>],</span><br><span class="line">        currentIndex: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        itemClick(index) &#123;</span><br><span class="line">          <span class="keyword">this</span>.currentIndex = index;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="v-bind-css"><a href="#v-bind-css" class="headerlink" title="v-bind css"></a>v-bind css</h3><ul><li><p>在写CSS属性名的时候</p></li><li><p>比如font-size</p><ul><li>我们可以使用驼峰式 (camelCase)  fontSize</li><li>或短横线分隔 (kebab-case，记得用单引号括起来) ‘font-size’</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 :style=&quot;&#123;color: currentColor, fontSize: fontSize + &#x27;px&#x27;&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line"><span class="comment">//也可以调用方法</span></span><br><span class="line">&lt;h2 :style=&quot;getStyles()&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; </span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123;&#123;&#125;&#125; 里面也可以调用方法，需要加()  </span></span><br><span class="line">    &lt;h2&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;&#123;&#125;&#125; 里面一般用的是变量名，方法有个() 可能有点别扭，这时候就能使用计算属性 </span></span><br><span class="line">    &lt;!-- ！！计算属性不用加括号 --&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//对应方法</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">          <span class="comment">// computed里面定义的也是函数，但是函数名一般不加类似于get的动词 </span></span><br><span class="line">          <span class="comment">//  但是它叫计算属性，所以一般起类似于属性的名字</span></span><br><span class="line">        fullName: function () &#123; </span><br><span class="line">          <span class="comment">// 这样写其实也是一个语法糖 里面有setter和getter 这个是getter</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//高阶函数计算</span></span><br><span class="line">      <span class="comment">// 算书本的总价   里面传一个回调函数 箭头函数</span></span><br><span class="line">      totalPrice: function () &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.books.reduce((preValue, book) =&gt; &#123;</span><br><span class="line">          <span class="keyword">return</span> preValue + book.price * book.count</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      methods: &#123;</span><br><span class="line">        getFullName() &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="计算属性和methods的对比"><a href="#计算属性和methods的对比" class="headerlink" title="计算属性和methods的对比"></a>计算属性和methods的对比</h3><p>计算属性会进行缓存，如果多次使用时，计算属性只会调用一次。</p><h2 id="ES6拓展"><a href="#ES6拓展" class="headerlink" title="ES6拓展"></a>ES6拓展</h2><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = document.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">      (function (num) &#123; <span class="comment">// 0</span></span><br><span class="line">        btns[i].addEventListener(<span class="string">&#x27;click&#x27;</span>, function () &#123;</span><br><span class="line">          console.log(<span class="string">&#x27;第&#x27;</span> + num + <span class="string">&#x27;个按钮被点击&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>立即函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 立即执行函数</span></span><br><span class="line">    (function () &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;())</span><br><span class="line">    (function () &#123;</span><br><span class="line"> </span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><ul><li><strong>总结</strong><ul><li>ES5之前因为if和for都没有块级作用域的概念, 所以在很多时候, 我们都必须借助于function的作用域来解决应用外面变量的问题.</li><li>ES6中,加入了let, let它是有if和for的块级作用</li><li>总之，记住<ul><li>ES5中的var是没有块级作用域的(if/for) </li><li>ES6中的let是由块级作用的(if/for)</li></ul></li></ul></li></ul><h3 id="ES6对象字面量的增强写法"><a href="#ES6对象字面量的增强写法" class="headerlink" title="ES6对象字面量的增强写法"></a>ES6对象字面量的增强写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> Object()</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">const</span> obj = &#123;  <span class="comment">// 这个&#123;&#125; 就是对象的字面量</span></span><br><span class="line">    name: <span class="string">&#x27;why&#x27;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    run: function () &#123;</span><br><span class="line">      console.log(<span class="string">&#x27;在奔跑&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    eat: function () &#123;</span><br><span class="line">      console.log(<span class="string">&#x27;在次东西&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    run: function () &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    eat: function () &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">  <span class="keyword">const</span> obj = &#123;</span><br><span class="line">    run() &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    eat() </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><ul><li>缩写@</li><li>绑定事件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在调用方式, 如何手动的获取到浏览器参数的event对象: $event--&gt;</span><br><span class="line"><span class="meta">@click</span> = <span class="string">&quot;btn(abc, $event)&quot;</span></span><br></pre></td></tr></table></figure><h3 id="click-特殊事件处理"><a href="#click-特殊事件处理" class="headerlink" title="click 特殊事件处理"></a>click 特殊事件处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;!--<span class="number">1.</span> .stop修饰符的使用  停止冒泡--&gt;</span><br><span class="line">  &lt;div @click=<span class="string">&quot;divClick&quot;</span>&gt;</span><br><span class="line">    aaaaaaa</span><br><span class="line">    &lt;button @click.stop=<span class="string">&quot;btnClick&quot;</span>&gt;按钮&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;!--<span class="number">2.</span> .prevent修饰符的使用 阻止默认行为--&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;form action=<span class="string">&quot;baidu&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span> @click.prevent=<span class="string">&quot;submitClick&quot;</span>&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;!--<span class="number">3.</span> .监听某个键盘的键帽--&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;text&quot;</span> @keyup.enter=<span class="string">&quot;keyUp&quot;</span>&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;!--<span class="number">4.</span> .once修饰符的使用 点击回调只会触发一次--&gt;</span><br><span class="line">  &lt;button @click.once=<span class="string">&quot;btn2Click&quot;</span>&gt;按钮<span class="number">2</span>&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="v-if-、v-else-if和v-else-的使用"><a href="#v-if-、v-else-if和v-else-的使用" class="headerlink" title="v-if 、v-else-if和v-else 的使用"></a>v-if 、v-else-if和v-else 的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;h2 v-if=&quot;score&gt;=90&quot;&gt;优秀&lt;/h2&gt;</span><br><span class="line">&lt;h2 v-else-if=&quot;score&gt;=80&quot;&gt;良好&lt;/h2&gt;</span><br><span class="line">&lt;h2 v-else-if=&quot;score&gt;=60&quot;&gt;及格&lt;/h2&gt;</span><br><span class="line">&lt;h2 v-else&gt;不及格&lt;/h2&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="复用元素"><a href="#复用元素" class="headerlink" title="复用元素"></a>复用元素</h3><ul><li>如果我们不希望Vue出现类似重复利用的问题，可以给对应的input添加key</li><li>并且我们需要保证key的不同</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-<span class="keyword">if</span>=<span class="string">&quot;isUser&quot;</span>&gt;</span><br><span class="line">   &lt;label for=&quot;username&quot;&gt;用户账号&lt;/label&gt;</span><br><span class="line">   &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span> placeholder=<span class="string">&quot;用户账号&quot;</span> key=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line"> &lt;/span&gt;</span><br><span class="line"> &lt;span v-<span class="keyword">else</span>&gt;</span><br><span class="line">   &lt;label for=&quot;email&quot;&gt;用户邮箱&lt;/label&gt;</span><br><span class="line">   &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;email&quot;</span> placeholder=<span class="string">&quot;用户邮箱&quot;</span> key=<span class="string">&quot;email&quot;</span>&gt;</span><br><span class="line"> &lt;/span&gt;</span><br><span class="line"> &lt;button @click=&quot;isUser = !isUser&quot;&gt;切换类型&lt;/button&gt;</span><br></pre></td></tr></table></figure><h3 id="v-show和v-if"><a href="#v-show和v-if" class="headerlink" title="v-show和v-if"></a>v-show和v-if</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!--v-<span class="keyword">if</span>: 当条件为<span class="keyword">false</span>时, 包含v-<span class="keyword">if</span>指令的元素, 根本就不会存在dom中--&gt;</span><br><span class="line">&lt;h2 v-if=&quot;isShow&quot; id=&quot;aaa&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!--v-show: 当条件为<span class="keyword">false</span>时, v-show只是给我们的元素添加一个行内样式: display: none--&gt;</span><br><span class="line">&lt;h2 v-show=&quot;isShow&quot; id=&quot;bbb&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//value 是对象的值 key作为唯一标识 index是索引</span></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(value, key, index) in info&quot;&gt;&#123;&#123;value&#125;&#125;-&#123;&#123;key&#125;&#125;-&#123;&#123;index&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20220511222541718.png" alt="image-20220511222541718"></p><ul><li>当某一层有很多相同的节点时，也就是列表节点时，我们希望插入一个新的节点<ul><li>我们希望可以在B和C之间加一个F，Diff算法默认执行起来是这样的。</li><li>即把C更新成F，D更新成C，E更新成D，最后再插入E，是不是很没有效率？</li></ul></li><li>所以我们需要使用key来给每个节点做一个唯一标识<ul><li>Diff算法就可以正确的识别此节点</li><li>找到正确的位置区插入新的节点。</li></ul></li><li>所以一句话，key的作用主要是为了高效的更新虚拟DOM。</li></ul><h2 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1.push方法 </span></span><br><span class="line">   <span class="keyword">this</span>.letters.push(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">   <span class="keyword">this</span>.letters.push(<span class="string">&#x27;aaaa&#x27;</span>, <span class="string">&#x27;bbbb&#x27;</span>, <span class="string">&#x27;cccc&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 2.pop(): 删除数组中的最后一个元素</span></span><br><span class="line">   <span class="keyword">this</span>.letters.pop();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 3.shift(): 删除数组中的第一个元素</span></span><br><span class="line">    <span class="keyword">this</span>.letters.shift();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 4.unshift(): 在数组最前面添加元素</span></span><br><span class="line">    <span class="keyword">this</span>.letters.unshift()</span><br><span class="line">    <span class="keyword">this</span>.letters.unshift(<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 5.splice作用: 删除元素/插入元素/替换元素</span></span><br><span class="line">          <span class="comment">// 删除元素: 第二个参数传入你要删除几个元素(如果没有传,就删除后面所有的元素)</span></span><br><span class="line">          <span class="comment">// 替换元素: 第二个参数, 表示我们要替换几个元素, 后面是用于替换前面的元素</span></span><br><span class="line">          <span class="comment">// 插入元素: 第二个参数, 传入0, 并且后面跟上要插入的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.letters.splice(<span class="number">1</span>, <span class="number">3</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line">    <span class="keyword">this</span>.letters.sort()</span><br><span class="line"><span class="comment">// 翻转</span></span><br><span class="line">    <span class="keyword">this</span>.letters.reverse()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果对数组内部进行修改，是不能做到双向绑定的</span></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">this</span>.letters.splice(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;bbbbbb&#x27;</span>) </span><br><span class="line"><span class="comment">// 方法二        </span></span><br><span class="line">Vue.set(<span class="keyword">this</span>.letters, <span class="number">0</span>, <span class="string">&#x27;bbbbbb&#x27;</span>)     </span><br></pre></td></tr></table></figure><h2 id="过滤器filter"><a href="#过滤器filter" class="headerlink" title="过滤器filter"></a>过滤器filter</h2><ul><li><strong>过滤器可以用在两个地方：双花括号插值 或 v-bind表达式。</strong></li><li><strong><em>模板中文本后边需要添加管道符号（ | ）作为分隔，管道符 | 后边是文本的处理函数，处理函数的第一个参数是：管道符前边的——文本内容，如果处理函数上边传递参数，则从第二个参数依次往后是传递的参数。</em></strong></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//局部filter</span></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;电脑价格：&#123;&#123;price | addPriceIcon&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line"> let vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        price:<span class="number">200</span></span><br><span class="line">    &#125;,</span><br><span class="line">    filters:&#123;</span><br><span class="line">        <span class="comment">//处理函数</span></span><br><span class="line">        addPriceIcon(value)&#123;</span><br><span class="line">            console.log(value)<span class="comment">//200</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;¥&#x27;</span> + value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 全局过滤器</span></span><br><span class="line"> &lt;h3&gt;&#123;&#123;viewContent | addNamePrefix&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.filter(<span class="string">&quot;addNamePrefix&quot;</span>,(value)=&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;my name is&quot;</span> + value</span><br><span class="line">    &#125;)</span><br><span class="line"> </span><br><span class="line">    let vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            viewContent:<span class="string">&quot;吕星辰&quot;</span> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>全局过滤器</p><ul><li><strong>参数一：是过滤器的名字，也就是管道符后边的处理函数；</strong></li><li><strong>参数二：处理函数，处理函数的参数同上</strong></li></ul><p>实际开发是要放到js文件上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//filter.js 文件</span></span><br><span class="line">let filter_price = function (val,...params)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;¥&quot;</span> + val</span><br><span class="line">&#125;</span><br><span class="line">let filter_date = function ()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;2019/10/20&quot;</span> + val</span><br><span class="line">&#125;</span><br><span class="line">export &#123;filter_price,filter_date&#125; <span class="comment">//导出过滤函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">//下边是2种导入方式，推荐第一种</span></span><br><span class="line"><span class="keyword">import</span> * as _filter from <span class="string">&#x27;./filters/filter&#x27;</span></span><br><span class="line"><span class="comment">// import &#123;filter_price,filter_date&#125; from &#x27;./filters/filter&#x27;</span></span><br><span class="line"> </span><br><span class="line">console.log(_filter)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//使用Object.keys（）方法，得到一个由key组成的数组，遍历数据，让key作为全局过滤器的名字，后边的是key对应的处理函数，这样在任何一个组件中都可以使用全局过滤器了</span></span><br><span class="line">Object.keys(_filter).forEach(item=&gt;&#123;</span><br><span class="line">  Vue.filter(item,_filter[item])</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,store,</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span></span><br></pre></td></tr></table></figure><p>通过全局过滤器讲一个别的小知识点：当我们引用vue框架时，vue会被自动添加到window全局对象上边，而Vue正是一个构造函数，里边定义的是一些静态方法和静态属性，我们知道在ES6类中有静态方法，只有类可以调用！这样也就不难理解了，filter全局过滤器可以被Vue所调用，因为它是一个静态方法</p><h2 id="js高阶函数"><a href="#js高阶函数" class="headerlink" title="js高阶函数"></a>js高阶函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编程范式: 命令式编程/声明式编程</span></span><br><span class="line"><span class="comment">// 编程范式: 面向对象编程(第一公民:对象)/函数式编程(第一公民:函数)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">// filter中的回调函数有一个要求: 必须返回一个boolean值</span></span><br><span class="line"><span class="comment">// true: 当返回true时, 函数内部会自动将这次回调的n加入到新的数组中</span></span><br><span class="line"><span class="comment">// false: 当返回false时, 函数内部会过滤掉这次的n</span></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">111</span>, <span class="number">222</span>, <span class="number">444</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 高阶函数 本身参数也是一个函数</span></span><br><span class="line"><span class="comment">// let total = nums.filter(n =&gt; n &lt; 100).map(n =&gt; n * 2).reduce((pre, n) =&gt; pre + n);</span></span><br><span class="line"><span class="comment">// console.log(total);</span></span><br><span class="line">let total = nums.filter(function (n) &#123;</span><br><span class="line">  <span class="keyword">return</span> n &lt; <span class="number">100</span></span><br><span class="line">&#125;).map(function (n) &#123;</span><br><span class="line">  <span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">&#125;).reduce(function (prevValue, n) &#123;</span><br><span class="line">  <span class="keyword">return</span> prevValue + n</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">console.log(total);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.filter函数的使用</span></span><br><span class="line"><span class="comment">// 10, 20, 40, 50</span></span><br><span class="line">let newNums = nums.filter(function (n) &#123;</span><br><span class="line">  <span class="keyword">return</span> n &lt; <span class="number">100</span></span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 2.map函数的使用</span></span><br><span class="line"><span class="comment">// 20, 40, 80, 100</span></span><br><span class="line">let new2Nums = newNums.map(function (n) &#123; <span class="comment">// 20</span></span><br><span class="line">  <span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line">console.log(new2Nums);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.reduce函数的使用</span></span><br><span class="line"><span class="comment">// reduce 作用对数组中所有的内容进行汇总</span></span><br><span class="line">let total = new2Nums.reduce(function (preValue, n) &#123;</span><br><span class="line">  <span class="keyword">return</span> preValue + n</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">console.log(total);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 第一次: preValue 0 n 20</span></span><br><span class="line"><span class="comment">// 第二次: preValue 20 n 40</span></span><br><span class="line"><span class="comment">// 第二次: preValue 60 n 80</span></span><br><span class="line"><span class="comment">// 第二次: preValue 140 n 100</span></span><br><span class="line"><span class="comment">// 240</span></span><br><span class="line"><span class="comment">// preValue是 预备值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="表单绑定v-model"><a href="#表单绑定v-model" class="headerlink" title="表单绑定v-model"></a>表单绑定v-model</h2><ul><li>当我们在输入框输入内容时</li><li>因为input中的v-model绑定了message，所以会实时将输入的内容传递给message，message发生改变。</li><li>当message发生改变时，因为上面我们使用Mustache语法，将message的值插入到DOM中，所以DOM会发生响应的改变,实现了双向绑定</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;message&quot;</span>&gt;</span><br><span class="line">  &#123;&#123;message&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      message: <span class="string">&#x27;你好啊&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-model原理"><a href="#v-model原理" class="headerlink" title="v-model原理"></a>v-model原理</h3><ul><li>v-model其实是一个语法糖，它的背后本质上是包含两个操作：<ul><li>1.v-bind绑定一个value属性</li><li>2.v-on指令给当前元素绑定input事件</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!--<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span>--&gt;</span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 上面等同于 --&gt;</span></span></span><br><span class="line">&lt;!--&lt;input type=&quot;text&quot; :value=&quot;message&quot; @input=&quot;valueChange&quot;&gt;--&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 也就是 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; :value=&quot;message&quot; @input=&quot;message = $event.target.value&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="v-model结合radio类型使用"><a href="#v-model结合radio类型使用" class="headerlink" title="v-model结合radio类型使用"></a>v-model结合radio类型使用</h3><ul><li><strong>单选按钮radio的value会影响v-model的值</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 需要加相同的name 否则可以多选 --&gt;</span><br><span class="line">&lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男 --&gt;</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 一旦v-moddel绑定的是同一个变量，name可以不用写 --&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line">&lt;input type=&quot;radio&quot; id=&quot;male&quot; value=&quot;男&quot; v-model=&quot;sex&quot;&gt;男</span><br><span class="line">&lt;input type=&quot;radio&quot; id=&quot;female&quot; value=&quot;女&quot; v-model=&quot;sex&quot;&gt;女</span><br><span class="line">    </span><br><span class="line">    const app = new Vue(&#123;</span><br><span class="line">      el: &#x27;#app&#x27;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        message: &#x27;你好啊&#x27;,</span><br><span class="line">        sex: &#x27;女&#x27; // 可以给radio默认值</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="v-model结合checkbox类型使用"><a href="#v-model结合checkbox类型使用" class="headerlink" title="v-model结合checkbox类型使用"></a>v-model结合checkbox类型使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!--<span class="number">1.</span>checkbox单选框 --&gt;</span><br><span class="line">    &lt;!--  v-model即为布尔值<span class="literal">true</span>/<span class="literal">false</span>。此时input的value并不影响v-model的值--&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;agree&quot;</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;checkbox&quot;</span> id=<span class="string">&quot;agree&quot;</span> v-model=<span class="string">&quot;isAgree&quot;</span>&gt;同意协议</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--<span class="number">2.</span>checkbox多选框--&gt;</span><br><span class="line">    &lt;!--  当是多个复选框时，因为可以选中多个，所以对应的data中属性是一个数组。当选中某一个时，就会将input的value添加到数组中。--&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;篮球&quot;</span> v-model=<span class="string">&quot;hobbies&quot;</span>&gt;篮球</span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;足球&quot;</span> v-model=<span class="string">&quot;hobbies&quot;</span>&gt;足球</span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;乒乓球&quot;</span> v-model=<span class="string">&quot;hobbies&quot;</span>&gt;乒乓球</span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;羽毛球&quot;</span> v-model=<span class="string">&quot;hobbies&quot;</span>&gt;羽毛球</span><br><span class="line">    &lt;h2&gt;您的爱好是: &#123;&#123;hobbies&#125;&#125;&lt;/h2&gt;</span><br><span class="line"> </span><br><span class="line">     &lt;!-- 值绑定 动态的给value赋值 --&gt;</span><br><span class="line">     &lt;!-- <span class="keyword">for</span> 标签的解释 label中的<span class="keyword">for</span>属性规定了label与哪个表单元素绑定。<span class="keyword">for</span>属性的值和表单元素的id值一样，即可完成该label标签与该表单元素的绑定。 --&gt;   </span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;test&quot;</span>&gt;label标签&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">    &lt;label v-<span class="keyword">for</span>=<span class="string">&quot;item in originHobbies&quot;</span> :<span class="keyword">for</span>=<span class="string">&quot;item&quot;</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;checkbox&quot;</span> :value=<span class="string">&quot;item&quot;</span> :id=<span class="string">&quot;item&quot;</span> v-model=<span class="string">&quot;hobbies&quot;</span>&gt;&#123;&#123;item&#125;&#125; &lt;/label&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//js</span></span><br><span class="line">   <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        message: <span class="string">&#x27;你好啊&#x27;</span>,</span><br><span class="line">        isAgree: <span class="literal">false</span>, <span class="comment">// 单选框</span></span><br><span class="line">        hobbies: [], <span class="comment">// 多选框,</span></span><br><span class="line">        originHobbies: [<span class="string">&#x27;篮球&#x27;</span>, <span class="string">&#x27;足球&#x27;</span>, <span class="string">&#x27;乒乓球&#x27;</span>, <span class="string">&#x27;羽毛球&#x27;</span>, <span class="string">&#x27;台球&#x27;</span>, <span class="string">&#x27;高尔夫球&#x27;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="v-model结合select类型使用"><a href="#v-model结合select类型使用" class="headerlink" title="v-model结合select类型使用"></a>v-model结合select类型使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单选   </span></span><br><span class="line">&lt;select name=<span class="string">&quot;abc&quot;</span> v-model=<span class="string">&quot;fruit&quot;</span>&gt;</span><br><span class="line">      &lt;option value=&quot;苹果&quot;&gt;苹果&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;香蕉&quot;&gt;香蕉&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;榴莲&quot;&gt;榴莲&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;葡萄&quot;&gt;葡萄&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;h2&gt;您选择的水果是: &#123;&#123;fruit&#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;select name=<span class="string">&quot;abc&quot;</span> v-model=<span class="string">&quot;fruits&quot;</span> multiple&gt;</span><br><span class="line">      &lt;option value=&quot;苹果&quot;&gt;苹果&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;香蕉&quot;&gt;香蕉&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;榴莲&quot;&gt;榴莲&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;葡萄&quot;&gt;葡萄&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">        </span><br><span class="line"> <span class="comment">//js</span></span><br><span class="line"> <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        message: <span class="string">&#x27;你好啊&#x27;</span>,</span><br><span class="line">        fruit: <span class="string">&#x27;香蕉&#x27;</span>,</span><br><span class="line">        fruits: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="v-model-修饰符的使用"><a href="#v-model-修饰符的使用" class="headerlink" title="v-model 修饰符的使用"></a>v-model 修饰符的使用</h3><ul><li>lazy修饰符：<ul><li>默认情况下，v-model默认是在input事件中同步输入框的数据的。</li><li>也就是说，一旦有数据发生改变对应的data中的数据就会自动发生改变。</li><li>lazy修饰符可以让数据在失去焦点或者回车时才会更新</li></ul></li><li>number修饰符：<ul><li>默认情况下，在输入框中无论我们输入的是字母还是数字，都会被当做字符串类型进行处理。</li><li>但是如果我们希望处理的是数字类型，那么最好直接将内容当做数字处理。</li><li>number修饰符可以让在输入框中输入的内容自动转成数字类型</li></ul></li><li>trim修饰符：<ul><li>如果输入的内容首尾有很多空格，通常我们希望将其去除</li><li>trim修饰符可以过滤内容左右两边的空格</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--<span class="number">1.</span>修饰符: lazy 让数据在失去焦点或者回车时才会更新--&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;text&quot;</span> v-model.lazy=<span class="string">&quot;message&quot;</span>&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  &lt;!--<span class="number">2.</span>修饰符: number 让在输入框中输入的内容自动转成数字类型--&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;number&quot;</span> v-model.number=<span class="string">&quot;age&quot;</span>&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;age&#125;&#125;-&#123;&#123;<span class="keyword">typeof</span> age&#125;&#125;&lt;/h2&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;!--<span class="number">3.</span>修饰符: trim 过滤内容左右两边的空格--&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;text&quot;</span> v-model.trim=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">  &lt;h2&gt;您输入的名字:&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure><h1 id="Vue组件化思想"><a href="#Vue组件化思想" class="headerlink" title="Vue组件化思想"></a>Vue组件化思想</h1><ul><li><p>组件化是Vue.js中的重要思想</p><ul><li>它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用。</li><li>任何的应用都会被抽象成一颗组件树。</li></ul></li><li><p>组件的使用分成三个步骤：</p><ul><li>创建组件构造器</li><li>注册组件</li><li>使用组件。</li></ul></li></ul><p>组件注册实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1.创建组件构造器对象  extend() 没有s</span></span><br><span class="line">    <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span><br><span class="line">      <span class="comment">// 自定义组件的模板 使用到组件的地方，要显示的HTML代码</span></span><br><span class="line">      <span class="comment">// *最外需要一个div包裹</span></span><br><span class="line">      template: <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;我是标题&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;我是内容, 哈哈哈哈&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;我是内容, 呵呵呵呵&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 2.注册组件(全局注册) </span></span><br><span class="line">    <span class="comment">// 需要传递两个参数：</span></span><br><span class="line">    <span class="comment">// 1、注册组件的标签名 (必须加引号)</span></span><br><span class="line">    <span class="comment">// 2、组件构造器</span></span><br><span class="line">    Vue.component(<span class="string">&#x27;my-cpn&#x27;</span>, cpnC)</span><br><span class="line">   </span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">&lt;my-cpn&gt;&lt;/my-cpn&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>如果我们<strong>注册的组件是挂载在某个实例中, 那么就是一个局部组件</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      message: <span class="string">&#x27;你好啊&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      <span class="comment">// 使用组件时的标签名:组件构造器</span></span><br><span class="line">      <span class="comment">// &#x27;cpn&#x27;: cpnC  局部组件的标签名有无引号都可以</span></span><br><span class="line">      cpn: cpnC</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//区分 这是全局</span></span><br><span class="line">  Vue.component(<span class="string">&#x27;my-cpn&#x27;</span>, cpnC)</span><br></pre></td></tr></table></figure><h2 id="父组件和子组件"><a href="#父组件和子组件" class="headerlink" title="父组件和子组件"></a>父组件和子组件</h2><p> 前面我们看到了组件树：</p><ul><li>组件和组件之间存在层级关系</li><li>而其中一种非常重要的关系就是父子组件的关系</li></ul><p>语法糖组件注册</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!--<span class="number">1.</span>script标签, 注意:类型必须是text/x-template 然后给它设置一个id --&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/x-template&quot;</span> id=<span class="string">&quot;cpn&quot;</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;我是标题&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;我是内容,哈哈哈&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!--<span class="number">2.</span>template标签--&gt;</span><br><span class="line">&lt;template id=<span class="string">&quot;cpn&quot;</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;我是标题&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;我是内容,呵呵呵&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.注册一个全局组件</span></span><br><span class="line">  Vue.component(<span class="string">&#x27;cpn&#x27;</span>, &#123;</span><br><span class="line">    template: <span class="string">&#x27;#cpn&#x27;</span> <span class="comment">// 需要加上选择器</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="数据存放"><a href="#数据存放" class="headerlink" title="数据存放"></a>数据存放</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title: <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>组件自己的数据存放在哪里呢?<ul><li>组件对象也有一个data属性(也可以有methods等属性，下面我们有用到)</li><li>只是这个data属性必须是一个函数</li><li>而且这个函数返回一个对象，对象内部保存着数据</li></ul></li></ul><h3 id="解释为什么要一个函数呢"><a href="#解释为什么要一个函数呢" class="headerlink" title="解释为什么要一个函数呢"></a>解释为什么要一个函数呢</h3><ul><li>为什么data在组件中必须是一个函数呢?<ul><li>首先，如果不是一个函数，Vue直接就会报错。</li><li>其次，原因是在于Vue让每个组件对象都返回一个新的对象，因为如果是同一个对象的，组件在多次使用后会相互影响。</li></ul></li></ul><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20220512144302775.png" alt="image-20220512144302775"></p><h2 id="父子组件的通信"><a href="#父子组件的通信" class="headerlink" title="父子组件的通信"></a>父子组件的通信</h2><ul><li>通过<strong>props</strong>向子组件传递数据（<strong>父传子</strong>） 婆婆</li><li>通过<strong>事件</strong>向父组件发送消息（<strong>子传父</strong>）  报告</li></ul><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20220512144400430.png" alt="image-20220512144400430"></p><h3 id="props基本用法"><a href="#props基本用法" class="headerlink" title="props基本用法"></a>props基本用法</h3><ul><li><strong>在组件中，使用选项props来声明需要从父级接收到的数据</strong>。</li><li>props的值有两种方式：<ul><li>方式一：<strong>字符串数组</strong>，数组中的字符串就是传递时的名称。</li><li>方式二：<strong>对象</strong>，对象可以设置传递时的类型，也可以设置默认值等。</li></ul></li></ul><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20220512144547640.png" alt="image-20220512144547640"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">  步骤：</span><br><span class="line">  <span class="number">1.</span>在子组件里写props</span><br><span class="line">  <span class="number">2.</span>在子组件的标签加上v-bind  </span><br><span class="line">   &lt;cpn v-bind:props里定义的名称=<span class="string">&quot;父组件data数据名称&quot;</span>&gt;&lt;/cpn&gt;</span><br><span class="line">  <span class="number">3.</span>将props中的值显示在子组件中</span><br><span class="line"> --&gt;</span><br></pre></td></tr></table></figure><h3 id="props数据验证—对象写法"><a href="#props数据验证—对象写法" class="headerlink" title="props数据验证—对象写法"></a>props数据验证—对象写法</h3><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20220512144814501.png" alt="image-20220512144814501"></p><p><strong>这里要注意</strong></p><ul><li> 提供一些默认值, 以及必传值</li><li> 类型是对象或者数组时, 默认值必须是一个工厂函数</li></ul><h3 id="props中的驼峰标识"><a href="#props中的驼峰标识" class="headerlink" title="props中的驼峰标识"></a>props中的驼峰标识</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;!-- v-bind 不支持驼峰 需要换成 -  --&gt;</span><br><span class="line">    &lt;cpn :c-info=<span class="string">&quot;info&quot;</span> :child-my-message=<span class="string">&quot;message&quot;</span> v-bind:<span class="class"><span class="keyword">class</span>&gt;&lt;/<span class="title">cpn</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class">  &lt;<span class="title">template</span> <span class="title">id</span></span>=<span class="string">&quot;cpn&quot;</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;&#123;&#123;cInfo&#125;&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;h2&gt;&#123;&#123;childMyMessage&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> cpn = &#123;</span><br><span class="line">      template: <span class="string">&#x27;#cpn&#x27;</span>,</span><br><span class="line">      props: &#123;</span><br><span class="line">        <span class="comment">// 在这里使用驼峰 :c-info=&quot;info&quot; 那里要用 -</span></span><br><span class="line">        cInfo: &#123;</span><br><span class="line">          type: <span class="built_in">Object</span>,</span><br><span class="line">          <span class="keyword">default</span> () &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        childMyMessage: &#123;</span><br><span class="line">          type: <span class="built_in">String</span>,</span><br><span class="line">          <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        info: &#123;</span><br><span class="line">          name: <span class="string">&#x27;why&#x27;</span>,</span><br><span class="line">          age: <span class="number">18</span>,</span><br><span class="line">          height: <span class="number">1.88</span></span><br><span class="line">        &#125;,</span><br><span class="line">        message: <span class="string">&#x27;aaaaaa&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        cpn</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="子级向父级传递—自定义事件-emit"><a href="#子级向父级传递—自定义事件-emit" class="headerlink" title="子级向父级传递—自定义事件 $emit()"></a>子级向父级传递—自定义事件 $emit()</h3><ul><li><p>子组件往父组件传递数据或者事件 </p></li><li><p>自定义事件的流程：</p><ul><li>在子组件中，通过$emit()来触发事件。</li><li>在父组件中，通过v-on来监听子组件事件。v-on的语法糖是@</li></ul></li></ul><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20220512145433045.png" alt="image-20220512145433045"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发射事件: 自定义事件</span></span><br><span class="line"><span class="comment">// 2.在子组件中，通过$emit()来触发事件</span></span><br><span class="line"><span class="built_in">this</span>.$emit(<span class="string">&#x27;item-click&#x27;</span>, item)</span><br><span class="line"><span class="comment">// 注意！！！！这里的$emit事件名不要写成驼峰！！！脚手架里可以，会先编译成一个组件对象render函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//子组件调用自定义函数的时候，父组件就会监听并触发传过来的形参方法</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="父传子–结合双向绑定案例-数据访问"><a href="#父传子–结合双向绑定案例-数据访问" class="headerlink" title="父传子–结合双向绑定案例 数据访问"></a>父传子–结合双向绑定案例 数据访问</h3><ul><li>需求</li><li>子组件input绑定v-model，input改变,props里的number1、number2跟着改变，vue实例data里的num1,num2也跟着变</li><li>子组件data的dnumber1一改变，dnumber2就 *100, dnumber2一改变,dumber/100</li></ul><ul><li>分析</li><li>之前的v-model是绑定vue实例data里面的数据</li><li><strong>如果v-model绑定了props里的值，会报错（props里的值最好是通过父组件修改）</strong></li><li>v-model不要绑定props里的值用data或computed代替把number1,number2分别赋值给data的dnumber1,dnumber2</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h3&gt;父组件&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;-----num1----&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;num1&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt; -----num2----&lt;/h3&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;h3&gt;&#123;&#123;num2&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;cpn :number1=<span class="string">&quot;num1&quot;</span> :number2=<span class="string">&quot;num2&quot;</span> @num1change=<span class="string">&quot;num1change&quot;</span> @num2change=<span class="string">&quot;num2change&quot;</span> /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;!-- 子组件 --&gt;</span><br><span class="line">  &lt;template id=<span class="string">&quot;cpn&quot;</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;!-- 这样写会报错 应该是由父组件修改它，避免直接修改props的值 --&gt;</span><br><span class="line">      &lt;!--  <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;number1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span> --&gt;</span><br><span class="line">      &lt;!--  <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;number2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span> --&gt;</span><br><span class="line">     </span><br><span class="line"> </span><br><span class="line">      &lt;h3&gt;子组件&lt;/h3&gt;</span><br><span class="line"> </span><br><span class="line">      &lt;h3&gt; -----number1----&lt;/h3&gt;</span><br><span class="line">      &lt;!-- 为什么props也会跟着一起变? -&gt; number1绑定的是父组件num1 --&gt;</span><br><span class="line">      &lt;h2&gt;props:&#123;&#123;number1&#125;&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;h2&gt;data:&#123;&#123;dnumber1&#125;&#125;&lt;/h2&gt;</span><br><span class="line"> </span><br><span class="line">      &lt;!--<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;dnumber1&quot;</span>&gt;</span>--&gt;</span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!-- v-model的本质 用@input来传值 --&gt;</span></span></span><br><span class="line">      &lt;input type=&quot;text&quot; :value=&quot;dnumber1&quot; @input=&quot;num1Input&quot;&gt;</span><br><span class="line"> </span><br><span class="line">      &lt;h3&gt;-----number2----&lt;/h3&gt;</span><br><span class="line"> </span><br><span class="line">      &lt;h2&gt;props:&#123;&#123;number2&#125;&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;h2&gt;data:&#123;&#123;dnumber2&#125;&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;!--&lt;input type=&quot;text&quot; v-model=&quot;dnumber2&quot;&gt;--&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; :value=&quot;dnumber2&quot; @input=&quot;num2Input&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 子组件</span><br><span class="line">    const cpn = &#123;</span><br><span class="line">      template: &#x27;#cpn&#x27;,</span><br><span class="line">      props: &#123;</span><br><span class="line">        number1: Number,</span><br><span class="line">        number2: Number</span><br><span class="line">      &#125;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          dnumber1: this.number1,</span><br><span class="line">          dnumber2: this.number2</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      //方法一 用methods</span><br><span class="line">      methods: &#123;</span><br><span class="line">        num1Input(event) &#123;</span><br><span class="line">   //event代表事件的状态，例如触发event对象的元素、鼠标的位置及状态、按下的键等等。</span><br><span class="line">   // 1.将input中的value赋值到dnumber中</span><br><span class="line">          this.dnumber1 = event.target.value;</span><br><span class="line"> </span><br><span class="line">          // 2.为了让父组件可以修改值, 发出一个事件</span><br><span class="line">          this.$emit(&#x27;num1change&#x27;, this.dnumber1)</span><br><span class="line"> </span><br><span class="line">          // 3.同时修饰dnumber2的值</span><br><span class="line">          this.dnumber2 = this.dnumber1 * 100;</span><br><span class="line">          this.$emit(&#x27;num2change&#x27;, this.dnumber2);</span><br><span class="line">        &#125;,</span><br><span class="line">        num2Input(event) &#123;</span><br><span class="line">          this.dnumber2 = event.target.value;</span><br><span class="line">          this.$emit(&#x27;num2change&#x27;, this.dnumber2)</span><br><span class="line"> </span><br><span class="line">          // 同时修饰dnumber1的值</span><br><span class="line">          this.dnumber1 = this.dnumber2 / 100;</span><br><span class="line">          this.$emit(&#x27;num1change&#x27;, this.dnumber1);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      //方法2 用watch实现 监听数值 </span><br><span class="line">      watch: &#123;</span><br><span class="line">          dnumber1(newValue) &#123;</span><br><span class="line">            this.dnumber2 = newValue * 100;</span><br><span class="line">            this.$emit(&#x27;num1change&#x27;, newValue);</span><br><span class="line">          &#125;,</span><br><span class="line">          dnumber2(newValue) &#123;</span><br><span class="line">            this.number1 = newValue / 100;</span><br><span class="line">            this.$emit(&#x27;num2change&#x27;, newValue);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    // 父组件</span><br><span class="line">    const app = new Vue(&#123;</span><br><span class="line">      el: &#x27;#app&#x27;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        num1: 1,</span><br><span class="line">        num2: 0</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        num1change(value) &#123;</span><br><span class="line">          // value传过来的是string类型,需要转换成数字</span><br><span class="line">          this.num1 = parseFloat(value)</span><br><span class="line">        &#125;,</span><br><span class="line">        num2change(value) &#123;</span><br><span class="line">          this.num2 = parseFloat(value)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        cpn</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="watch选项"><a href="#watch选项" class="headerlink" title="watch选项"></a>watch选项</h3><p> watch选项能够监听值的变化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- watch选项能够监听值的变化 --&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;number&quot;</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=<span class="string">&#x27;../js/vue.js&#x27;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                number: <span class="number">1</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            watch: &#123;</span><br><span class="line">                <span class="comment">// 监听number变量，当它有变化执行</span></span><br><span class="line">                <span class="comment">/* number(newValue, oldValue) &#123; // newValue新值，oldValue旧值 参数只写newValue也可以</span></span><br><span class="line"><span class="comment">                    console.log(&#x27;newVal&#x27;, newValue);</span></span><br><span class="line"><span class="comment">                    console.log(&#x27;oldVal&#x27;, oldValue);</span></span><br><span class="line"><span class="comment">                &#125; */</span></span><br><span class="line">                <span class="comment">// 也可以这样写</span></span><br><span class="line">                number: &#123;</span><br><span class="line">                    <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span> &#123; <span class="comment">//handler方法就是你watch中需要具体执行的方法</span></span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;newVal&#x27;</span>, newValue);</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;oldVal&#x27;</span>, oldValue);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    immediate: <span class="literal">true</span></span><br><span class="line">                    <span class="comment">//immediate为true时则立即触发回调函数；如果为false，则和上面的例子一样，不会立即执行回调。</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="父子组件的访问"><a href="#父子组件的访问" class="headerlink" title="父子组件的访问"></a>父子组件的访问</h3><ul><li><strong>父</strong>组件访问<strong>子</strong>组件：使用**$children或$refs**</li><li><strong>子</strong>组件访问<strong>父</strong>组件：使用**$parent**</li></ul><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20220512151605000.png" alt="image-20220512151605000"></p><h3 id="父子组件的访问方式：-refs（父访问子）"><a href="#父子组件的访问方式：-refs（父访问子）" class="headerlink" title="父子组件的访问方式： $refs（父访问子）"></a>父子组件的访问方式： $refs（父访问子）</h3><ul><li><p>children的缺陷:</p></li><li><p>通过$children访问子组件时，是一个<strong>数组类型</strong>，访问其中的子组件必须通过索引值。</p></li><li><p>但是当子组件过多，我们需要拿到其中一个时，往往不能确定它的索引值，甚至还可能会发生变化。</p></li><li><p>有时候，我们想明确获取其中一个特定的组件，这个时候就可以使用$refs</p></li><li><p>$refs的使用：</p><ul><li>$refs和ref指令通常是一起使用的。</li><li>首先，我们通过ref给某一个子组件绑定一个特定的ID。</li><li>其次，通过this.$refs.ID就可以访问到该组件了。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在引用子组件的时候加入ref的特定id</span></span><br><span class="line">&lt;cpn ref=<span class="string">&quot;aaa&quot;</span>&gt;&lt;/cpn&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.$children得到数组,并进行调用方法</span></span><br><span class="line"><span class="built_in">this</span>.$children[<span class="number">0</span>].showMessage();</span><br><span class="line"></span><br><span class="line"><span class="comment">//父组件调用时用this.$refs.ID</span></span><br><span class="line"><span class="comment">// 2.$refs reference(引用)  =&gt; 对象类型, 默认是一个空的对象 ref=&#x27;bbb&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.aaa.name);</span><br></pre></td></tr></table></figure><h3 id="父子组件的访问方式：-parent-子访问父-、-root-根组件"><a href="#父子组件的访问方式：-parent-子访问父-、-root-根组件" class="headerlink" title="父子组件的访问方式： $parent(子访问父)、$root(根组件)"></a>父子组件的访问方式： $parent(子访问父)、$root(根组件)</h3><ul><li>如果我们想在子组件中直接访问父组件，可以通过$parent  <strong>但不建议使用</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件调用</span></span><br><span class="line">  <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">     <span class="comment">// 1.访问父组件$parent 里面的数据变量</span></span><br><span class="line">     <span class="comment">// console.log(this.$parent);</span></span><br><span class="line">     <span class="comment">// console.log(this.$parent.name);</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">// 2.访问根组件$root</span></span><br><span class="line">     <span class="built_in">console</span>.log(<span class="built_in">this</span>.$root);</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="built_in">this</span>.$root.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h1><p>组件的插槽：</p><ul><li>组件的插槽也是为了让我们封装的组件更加具有扩展性。</li></ul><h3 id="slot基本使用"><a href="#slot基本使用" class="headerlink" title="slot基本使用"></a>slot基本使用</h3><ul><li><p>当子组件的功能复杂时，子组件的插槽可能并非是一个。</p><ul><li>比如我们封装一个导航栏的子组件，可能就需要三个插槽，分别代表左边、中间、右边。</li><li>那么，外面在给插槽插入内容时，如何区分插入的是哪一个呢？</li><li>这个时候，我们就需要给插槽起一个名字</li></ul><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20220512152649747.png" alt="image-20220512152649747"></p></li></ul><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20220512152838740.png" alt="image-20220512152838740"></p><h3 id="2-6-版本迭代"><a href="#2-6-版本迭代" class="headerlink" title="2.6+版本迭代"></a>2.6+版本迭代</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--任何没有被包裹在带有 v-slot 的 &lt;template&gt; 中的内容都会被视为默认插槽的内容。或者可以给他起名default--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;template v-slot:default&gt;我是内容&lt;/template&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- v-slot:center --&gt;</span></span><br><span class="line">        &lt; template v-slot:center &gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>替换没有名字的插槽<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//语法糖 #。。。</span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 跟 v-on 和 v-bind 一样，v-slot 也有缩写，即把参数之前的所有内容 (v-slot:) 替换为字符 #。例如 v-slot:header 可以被重写为 #header：，前提是必须要有插槽名！！！--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> #<span class="attr">right</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>替换后的右边<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span>默认插槽内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h3><ul><li><strong>父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译。</strong></li><li>那么他的作用域就是父组件，使用的属性也是属于父组件的属性。</li><li>因此，isShow使用的是Vue实例中的属性，而不是子组件的属性。</li><li>子归子 父归父</li></ul><h3 id="作用域插槽：使用"><a href="#作用域插槽：使用" class="headerlink" title="作用域插槽：使用"></a>作用域插槽：使用</h3><ul><li>子组件定义的数据传到父组件上，并使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--  v-slot:slot1=&#x27;props1&#x27; slot1是具名插槽的名字 props1是定义名字接受数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:slot1</span>=<span class="string">&#x27;props1&#x27;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">                &lt;span&gt;</span></span><br><span class="line"><span class="comment">                    &#123;&#123;props1&#125;&#125;</span></span><br><span class="line"><span class="comment">                &lt;/span&gt; --&gt;</span></span><br><span class="line"> </span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;props1.data1.join(&#x27;-&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">                    &#123;&#123;props1.msg&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 可以传多个值 所有的值会包含在一个对象中 在父组件中v-slot=&quot;&quot;中定义名字接收 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:data1</span>=<span class="string">&#x27;movies&#x27;</span> <span class="attr">:msg</span>=<span class="string">&#x27;message&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;slot1&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in movies&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                        &#123;&#123;item&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:data2</span>=<span class="string">&#x27;name&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;slot2&#x27;</span>&gt;</span></span><br><span class="line">                &#123;&#123;name&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:data3</span>=<span class="string">&#x27;defult&#x27;</span>&gt;</span>默认插槽<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 子组件定义的数据 --&gt;</span></span><br><span class="line">        const cpn = &#123;</span><br><span class="line">            template: &#x27;#cpn&#x27;,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    movies: [&#x27;战狼&#x27;, &#x27;鬼吹灯&#x27;, &#x27;盗墓笔记&#x27;],</span><br><span class="line">                    message: &#x27;你好呀&#x27;,</span><br><span class="line">                    name: &#x27;yangyanyan&#x27;,</span><br><span class="line">                    defult: &#x27;我是默认的数据&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h1 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h1><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><ul><li><p>模块化有两个核心：导出和导入</p></li><li><p>CommonJS的导出：</p></li></ul><p><img src= "/img/loading1.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210720175046818.png" alt="img"></p><ul><li><p>CommonJS的导入</p><p><img src= "/img/loading1.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210720175121523.png" alt="img"></p></li></ul><h2 id="ES6的export指令"><a href="#ES6的export指令" class="headerlink" title="ES6的export指令"></a>ES6的export指令</h2><ul><li>export指令用于导出变量、</li><li>比如下面的代码：</li></ul><p><img src= "/img/loading1.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210720212242467.png" alt="img"></p><ul><li>上面的代码还有另外一种写法：</li></ul><p><img src= "/img/loading1.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210720212302731.png" alt="img"></p><h3 id="导出函数或类"><a href="#导出函数或类" class="headerlink" title="导出函数或类"></a>导出函数或类</h3><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20220512155601483.png" alt="image-20220512155601483"></p><h3 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h3><ul><li><p>某些情况下，一个模块中包含某个的功能，我们并不希望给这个功能命名，而且让导入者可以自己来命名</p><ul><li>这个时候就可以使用export default </li></ul><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20220512155647377.png" alt="image-20220512155647377"></p></li><li><p>我们来到main.js中，这样使用就可以了</p><ul><li>这里的myFunc是我自己命名的，你可以根据需要命名它对应的名字 </li></ul><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20220512155722019.png" alt="image-20220512155722019"></p></li><li><p><strong>export default在同一个模块中，不允许同时存在多个</strong>。</p></li></ul><h2 id="ES6的import指令"><a href="#ES6的import指令" class="headerlink" title="ES6的import指令"></a>ES6的import指令</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导入的&#123;&#125;中定义的变量和函数</span></span><br><span class="line"><span class="keyword">import</span> &#123;flag, sum&#125; <span class="keyword">from</span> <span class="string">&quot;./aaa.js&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;小明是天才, 哈哈哈&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(sum(<span class="number">20</span>, <span class="number">30</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 2.直接导入export定义的变量</span></span><br><span class="line"><span class="keyword">import</span> &#123;num1, height&#125; <span class="keyword">from</span> <span class="string">&quot;./aaa.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num1);</span><br><span class="line"><span class="built_in">console</span>.log(height);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 3.导入 export的function/class</span></span><br><span class="line"><span class="keyword">import</span> &#123;mul, Person&#125; <span class="keyword">from</span> <span class="string">&quot;./aaa.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(mul(<span class="number">30</span>, <span class="number">50</span>));</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.run()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 4.导入 export default中的内容 可以根据需要命名它对应的名字</span></span><br><span class="line"><span class="keyword">import</span> addr <span class="keyword">from</span> <span class="string">&quot;./aaa.js&quot;</span>;</span><br><span class="line"> </span><br><span class="line">addr(<span class="string">&#x27;你好啊&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 5.统一全部导入 </span></span><br><span class="line"><span class="comment">// import &#123;flag, num, num1, height, Person, mul, sum&#125; from &quot;./aaa.js&quot;;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 通过*可以导入模块中所有的export变量</span></span><br><span class="line"><span class="comment">// 但是通常情况下我们需要给*起一个别名，方便后续的使用</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> aaa <span class="keyword">from</span> <span class="string">&#x27;./aaa.js&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(aaa.flag);</span><br><span class="line"><span class="built_in">console</span>.log(aaa.height);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> ES6 </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识碎片  SpringMVC、 Servlet 、序列和反序列</title>
      <link href="2021/03/08/%E7%9F%A5%E8%AF%86%E7%A2%8E%E7%89%87-SpringMVC%E3%80%81-Servlet-%E3%80%81%E5%BA%8F%E5%88%97%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97/"/>
      <url>2021/03/08/%E7%9F%A5%E8%AF%86%E7%A2%8E%E7%89%87-SpringMVC%E3%80%81-Servlet-%E3%80%81%E5%BA%8F%E5%88%97%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="springMVC"><a href="#springMVC" class="headerlink" title="springMVC"></a><strong>springMVC</strong></h1><h2 id="1、springmvc工作原理图"><a href="#1、springmvc工作原理图" class="headerlink" title="1、springmvc工作原理图"></a>1、springmvc工作原理图</h2><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/1121080-20190509202147059-745656946.jpg"></p><h2 id="2、springmvc工作流程"><a href="#2、springmvc工作流程" class="headerlink" title="2、springmvc工作流程"></a>2、springmvc工作流程</h2><p>1、 用户向服务端发送一次请求，这个请求会先到前端控制器DispatcherServlet(也叫中央控制器)。<br>2、DispatcherServlet接收到请求后会调用HandlerMapping处理器映射器。由此得知，该请求该由哪个Controller来处理（并未调用Controller，只是得知）<br>3、DispatcherServlet调用HandlerAdapter处理器适配器，告诉处理器适配器应该要去执行哪个Controller<br>4、HandlerAdapter处理器适配器去执行Controller并得到ModelAndView(数据和视图)，并层层返回给DispatcherServlet<br>5、DispatcherServlet将ModelAndView交给ViewReslover视图解析器解析，然后返回真正的视图。<br>6、DispatcherServlet将模型数据填充到视图中<br>7、DispatcherServlet将结果响应给用户</p><h2 id="3、组件说明"><a href="#3、组件说明" class="headerlink" title="3、组件说明"></a>3、组件说明</h2><ul><li>DispatcherServlet：前端控制器，也称为中央控制器，它是整个请求响应的控制中心，组件的调用由它统一调度。</li><li>HandlerMapping：处理器映射器，它根据用户访问的 URL 映射到对应的后端处理器 Handler。也就是说它知道处理用户请求的后端处理器，但是它并不执行后端处理器，而是将处理器告诉给中央处理器。</li><li>HandlerAdapter：处理器适配器，它调用后端处理器中的方法，返回逻辑视图 ModelAndView 对象。</li><li>ViewResolver：视图解析器，将 ModelAndView 逻辑视图解析为具体的视图（如 JSP）。</li><li>Handler：后端处理器，对用户具体请求进行处理，也就是我们编写的 Controller 类。</li></ul><h2 id="4、-接口说明"><a href="#4、-接口说明" class="headerlink" title="4、 接口说明"></a>4、 接口说明</h2><p>HandlerMapping接口 – 处理请求的映射<br>HandlerMapping接口的实现类：<br>SimpleUrlHandlerMapping 通过配置文件，把一个URL映射到Controller<br>DefaultAnnotationHandlerMapping 通过注解，把一个URL映射到Controller类上</p><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/c6b474c8-91fa-3009-a0e9-c868ca52baf2.jpg"></p><p>HandlerAdapter接口 – 处理请求的映射<br>AnnotationMethodHandlerAdapter类，通过注解，把一个URL映射到Controller类的方法上</p><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/8475318e-d2e2-3dd2-81e9-036090f0aad1-16556034249644.jpg"></p><p>Controller接口 – 控制器<br>由于我们使用了@Controller注解，添加了@Controller注解注解的类就可以担任控制器（Action）的职责,</p><p><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/67b19bd0-e44c-311a-8d05-80d013cf44ae.jpg" alt="67b19bd0-e44c-311a-8d05-80d013cf44ae"></p><h2 id="5、为什么要选springMVC"><a href="#5、为什么要选springMVC" class="headerlink" title="5、为什么要选springMVC"></a>5、为什么要选springMVC</h2><p>Spring MVC是当前最优秀的MVC框架，自从Spring 2.5版本发布后，由于支持注解配置，易用性有了大幅度的提高。Spring 3.0更加完善，<strong>实现了对Struts 2的超越</strong>。现在越来越多的开发团队选择了<strong>Spring MVC</strong>。</p><p><strong>Struts2</strong>也是非常优秀的MVC构架，优点非常多比如良好的结构，拦截器的思想，丰富的功能。但这里想说的是缺点，Struts2由于采用了==值栈==、OGNL表达式、struts2标签库等，会导致应用的==性能下降==，应避免使用这些功能。而Struts2的多层拦截器、多实例action性能都很好。</p><h1 id="Servlet工作原理"><a href="#Servlet工作原理" class="headerlink" title="Servlet工作原理"></a>Servlet工作原理</h1><p>介绍：Servlet是sun公司提供的一门用于开发动态web资源的技术。</p><p>​       Sun公司在其API中提供了一个servlet接口，用户若想用发一个动态web资源(即开发一个Java程序向浏览器输出数据)，需要完成以下2个步骤：<br>　　1、编写一个<strong>Java类</strong>，实现<strong>servlet</strong>接口。<br>　　2、把开发好的Java类部署到web服务器中。<br>　　按照一种约定俗成的称呼习惯，通常我们也把<strong>实现了servlet接口的java程序</strong>，称之为Servlet.</p><h2 id="Servlet的运行过程"><a href="#Servlet的运行过程" class="headerlink" title="Servlet的运行过程"></a>Servlet的运行过程</h2><p>Servlet程序是由WEB服务器调用，web服务器收到客户端的Servlet访问请求后：<br>　　①Web服务器首先<strong>检查</strong>是否已经==装载并创建了该Servlet的实例对象==。如果是，则直接执行第④步，否则，执行第②步。<br>　　②装载并创建该Servlet的一个实例对象。<br>　　③调用Servlet实例对象的**init()**方法。<br>　　④创建一个用于封装HTTP请求消息的HttpServletRequest对象和一个代表HTTP响应消息的HttpServletResponse对象，然后调用Servlet的service()方法并将请求和响应对象作为参数传递进去。<br>　　⑤WEB应用程序被停止或重新启动之前，Servlet引擎将卸载Servlet，并在卸载之前调用Servlet的destroy()方法。 </p><h2 id="Servlet接口实现类"><a href="#Servlet接口实现类" class="headerlink" title="Servlet接口实现类"></a>Servlet接口实现类</h2><p>　   Servlet接口SUN公司定义了两个默认实现类，分别为：<strong>GenericServlet</strong>、<strong>HttpServlet</strong>。</p><p>　　HttpServlet指能够处理HTTP请求的servlet，它在原有Servlet接口上添加了==一些与HTTP协议处理方法==，它比Servlet接口的功能更为强大。因此开发人员在编写Servlet时，通常应继承这个类，而避免直接去实现Servlet接口。<br>　　HttpServlet在实现Servlet接口时，==覆写了service方法==，该方法体内的代码会自动判断用户的请求方式，如为<strong>GET请求</strong>，则调用HttpServlet的<strong>doGet</strong>方法，如为<strong>Post</strong>请求，则调用<strong>doPost</strong>方法。因此，开发人员在编写Servlet时，通常只需要覆写doGet或doPost方法，而不要去覆写service方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloServlet</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.destroy(); <span class="comment">// Just puts &quot;destroy&quot; string in log  </span></span><br><span class="line">    &#125;  </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>  </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;  </span><br><span class="line">  </span><br><span class="line">          </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>  </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;servlet init&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="关于servlet并发问题"><a href="#关于servlet并发问题" class="headerlink" title="关于servlet并发问题"></a>关于servlet并发问题</h2><h3 id="Servlet的线程安全问题"><a href="#Servlet的线程安全问题" class="headerlink" title="Servlet的线程安全问题"></a>Servlet的线程安全问题</h3><p>   　当多个客户端并发访问同一个Servlet时，web服务器会为每一个客户端的访问请求创建一个线程，并在这个线程上调用Servlet的service方法，因此service方法内如果访问了同一个资源的话，就有可能引发线程安全问题。例如下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;   <span class="comment">//当存在有公共变量的时候，会发现并发期间数据不能够一致的问题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>  </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;  </span><br><span class="line">          </span><br><span class="line">        i++;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">4</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        response.getWriter().write(i+<span class="string">&quot;&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>  </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;  </span><br><span class="line">        doGet(request, response);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="Servlet解决方法"><a href="#Servlet解决方法" class="headerlink" title="Servlet解决方法"></a>Servlet解决方法</h3><blockquote><p>如果直接引用<strong>synchronized</strong> (<strong>this</strong>) 进行锁对象的话，可能会导致多线程访问的时候会出现堵塞情况，处理不了高并发的问题</p></blockquote><p>​       <strong>让Servlet去实现一个SingleThreadModel接口，如果某个Servlet实现了==SingleThreadModel==接口，那么Servlet引擎将以单线程模式来调用其service方法。</strong><br>　　查看Sevlet的API可以看到，SingleThreadModel接口中没有定义任何方法和常量。</p><blockquote><p>在Java中，把没有定义任何方法和常量的接口称之为标记接口</p></blockquote><p>​       经常看到的一个最典型的标记接口就是”<strong>Serializable</strong>“，这个接口也是没有定义任何方法和常量的，标记接口在Java中有什么用呢？主要作用就是给某个对象打上一个标志，告诉JVM，这个对象可以做什么，比如实现了”<strong>Serializable</strong>“接口的类的对象就可以被序列化，还有一个”Cloneable”接口，这个也是一个标记接口，在默认情况下，Java中的对象是不允许被克隆的，就像现实生活中的人一样，不允许克隆，但是只要实现了”Cloneable”接口，那么对象就可以被克隆了。</p><p>​      但是实现了SingleThreadModel接口并<strong>不能真正解决的Servlet的线程安全问题</strong>，因为Servlet的引擎会创建多个Servlet的实例对象，而真正意义上解决多线程安全问题是指一个<strong>Servlet实例对象被多线程同时调用</strong>的问题。事实上，在Servlet API 2.4中，已经将SingleThreadModel标记为Deprecated（过时的）那么防止线程安全的问题就是避免使用<strong>实例变量</strong>，采用<strong>局部变量</strong>的形式。</p><h1 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h1><blockquote><p>序列说白了就是方便传输，传输时要拆解为二进制 ，传完后再重组，序列化能保证重组的准确性</p></blockquote><h2 id="序列化定义"><a href="#序列化定义" class="headerlink" title="序列化定义"></a>序列化定义</h2><p><strong>序列化</strong>：<code>Java</code>中的序列化机制能够将一个实例对象信息写入到一个字节流中（<strong>只序列化对象的属性值，而不会去序列化方法</strong>），序列化后的对象可用于网络传输，或者持久化到数据库、磁盘中。</p><p><strong>反序列化</strong>：需要对象的时候，再通过字节流中的信息来重构一个相同的对象。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>一个对象序列化的接口，一个类只有实现了==Serializable==接口，它的对象才是==可序列化==的。因此如果要序列化某些类的对象，这些类就必须实现Serializable接口。而实际上，==Serializable是一个空接口==，==没有什么具体内容==，它的目的只是简单的标识一个类的对象可以被序列化。</li><li>String<code>已经内部实现了</code>Serializable</li></ul><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ol><li>比如说你的内存不够用了，那计算机就要将内存里面的一部分对象==暂时==的保存到硬盘中，等到要用的时候再读入到内存中，硬盘的那部分存储空间就是所谓的==虚拟内存==。在比如过你要将某个特定的对象保存到文件中，我隔几天在把它拿出来用，那么这时候就要实现Serializable接口</li><li>在进行java的Socket编程的时候，你有时候可能要传输某一类的对象，那么也就要实现Serializable接口；最常见的你传输一个字符串，它是JDK里面的类，也实现了Serializable接口，所以可以在网络上传输。</li></ol><h2 id="serialVersionUID-关键字"><a href="#serialVersionUID-关键字" class="headerlink" title="serialVersionUID 关键字"></a>serialVersionUID 关键字</h2><p>示例代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public final class String</span><br><span class="line">    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line">    &#x2F;** The value is used for character storage. *&#x2F;</span><br><span class="line">    private final char value[];</span><br><span class="line">    </span><br><span class="line">    &#x2F;** Cache the hash code for the string *&#x2F;</span><br><span class="line">    private int hash; &#x2F;&#x2F; Default to 0</span><br><span class="line"></span><br><span class="line">    &#x2F;** use serialVersionUID from JDK 1.0.2 for interoperability *&#x2F;</span><br><span class="line">    private static final long serialVersionUID &#x3D; -6849794470754667710L; &#x2F;&#x2F;这里有序列化id</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="serialVersionUID-作用"><a href="#serialVersionUID-作用" class="headerlink" title="serialVersionUID 作用"></a>serialVersionUID 作用</h2><p>因为序列化对象时，如果不显示的设置<code>serialVersionUID</code>，Java在序列化时会根据对象属性==自动==的生成一个<code>serialVersionUID</code>，再进行==存储或用作网络传输==。</p><p>在反序列化时，会根据对象属性自动再生成一个新的<code>serialVersionUID</code>，和序列化时生成的<code>serialVersionUID</code>进行==比对==，两个<code>serialVersionUID</code>相同则==反序列化==成功，否则就会抛异常。</p><p>而当显示的设置<code>serialVersionUID</code>后，Java在==序列化和反序列化==对象时，生成的<code>serialVersionUID</code>都为我们设定的<code>serialVersionUID</code>，这样就保证了==反序列化==的成功。</p><h2 id="transient-关键字"><a href="#transient-关键字" class="headerlink" title="transient 关键字"></a>transient 关键字</h2><p>序列化对象时如果希望哪个属性不被序列化，则用<code>transient</code>关键字修饰即可</p><p>可以看到字段<code>name</code>的值没有被保存到磁盘中，一旦变量被<code>transient</code>修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后==无法获得访问==。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String name; <span class="comment">//transient 在这里进行修饰</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Java序列化前的结果: User(name=fufu, age=<span class="number">18</span>)</span><br><span class="line">Java反序列化的结果:User(name=<span class="keyword">null</span>, age=<span class="number">18</span>)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>一个静态变量不管是否被<code>transient</code>修饰，均不能被序列化。 因为<code>static</code>修饰的属性是属于类，而非对象。</p>]]></content>
      
      
      <categories>
          
          <category> Java 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣习题 105. 从前序与中序遍历序列构造二叉树 解析</title>
      <link href="2021/02/03/%E5%8A%9B%E6%89%A3%E4%B9%A0%E9%A2%98-105-%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91-%E8%A7%A3%E6%9E%90/"/>
      <url>2021/02/03/%E5%8A%9B%E6%89%A3%E4%B9%A0%E9%A2%98-105-%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91-%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="力扣-105"><a href="#力扣-105" class="headerlink" title="力扣 105"></a>力扣 105</h1><h2 id="Q：从前序与中序遍历序列构造二叉树"><a href="#Q：从前序与中序遍历序列构造二叉树" class="headerlink" title="Q：从前序与中序遍历序列构造二叉树"></a>Q：从前序与中序遍历序列构造二叉树</h2><h2 id="1-解题"><a href="#1-解题" class="headerlink" title="1. 解题"></a>1. 解题</h2><h3 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2. 解题思路"></a>2. 解题思路</h3><ul><li>通过前序遍历的数组找到树的根节点</li><li>通过中序遍历的数组找到左右子树</li><li>使用遍历手段或者HaspMap键值对来实现找根过程</li></ul><h3 id="3-相关图解"><a href="#3-相关图解" class="headerlink" title="3. 相关图解"></a>3. 相关图解</h3><ul><li><p>第一步初始化<br><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20210203154853182.png"></p></li><li><p>第二步通过前序遍历找到树根，划分左右子树，通过HashMap找到中序遍历里面的树根<br><img src= "/img/loading1.gif" data-lazy-src="https://luworkspace-1309238427.cos.ap-guangzhou.myqcloud.com/img/image-20210203155913663.png"></p></li><li><p>移动位置，然后同时找到相对的地方进行递归</p></li></ul><h3 id="3-代码分析"><a href="#3-代码分析" class="headerlink" title="3. 代码分析"></a>3. 代码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.generics.tree.Tree;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">tree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        TreeNode() &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode(<span class="keyword">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.left = left;</span><br><span class="line">            <span class="keyword">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> preOrder 前序遍历数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inOrder  中序遍历数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preOrder, <span class="keyword">int</span>[] inOrder)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inOrder.length; i++) &#123;</span><br><span class="line">            map.put(inOrder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buildTreeHelper(preOrder,<span class="number">0</span>,preOrder.length,inOrder,<span class="number">0</span>,inOrder.length,map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> preOrder 前序遍历数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p_start 前序开始位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p_end 前序结束位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inOrder 中序遍历数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i_start 中序开始位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i_end 中序结束位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 键值对</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> root 树根</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTreeHelper</span><span class="params">(<span class="keyword">int</span>[] preOrder, <span class="keyword">int</span> p_start, <span class="keyword">int</span> p_end,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">int</span>[] inOrder, <span class="keyword">int</span> i_start, <span class="keyword">int</span> i_end,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    HashMap&lt;Integer, Integer&gt; map)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p_start == p_end) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> root_val = preOrder[p_start];</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(root_val);</span><br><span class="line">        <span class="keyword">int</span> root_index = map.get(root_val);</span><br><span class="line">        <span class="keyword">int</span> moveNum = root_index - i_start;</span><br><span class="line">        root.left = buildTreeHelper(preOrder, p_start+<span class="number">1</span>, p_start+moveNum+<span class="number">1</span>, inOrder, i_start, root_index, map);</span><br><span class="line">        root.right = buildTreeHelper(preOrder, p_start+moveNum+<span class="number">1</span>, p_end, inOrder, root_index+<span class="number">1</span>, i_end, map);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTree</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        System.out.print(root.val + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">        printTree(root.left);</span><br><span class="line">        printTree(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] preOrder = &#123;<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] inOrder = &#123;<span class="number">9</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        TreeNode root = buildTree(preOrder,inOrder);</span><br><span class="line"></span><br><span class="line">        printTree(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>1.优化多次使用for循环进行查找根操作</li><li>2.内部时间复杂度可以进一步优化</li><li>3.通过hashMap来快速存储，做到快速定位</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LC </tag>
            
            <tag> 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="2021/02/01/firstpost/"/>
      <url>2021/02/01/firstpost/</url>
      
        <content type="html"><![CDATA[<h1 id="第一次发布"><a href="#第一次发布" class="headerlink" title="第一次发布"></a>第一次发布</h1><ul><li>test</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test</span><br><span class="line">    <span class="comment">//ddd</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
